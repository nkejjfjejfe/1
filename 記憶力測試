import tkinter as tk
from tkinter import messagebox
import random
import time

class MemoryTestApp:
    def __init__(self, master):
        self.master = master
        master.title("數字瞬間記憶力測試")
        master.geometry("800x800")
        self.label = tk.Label(master, text="觀看數字序列：", font=("Helvetica", 28))  
        self.label.pack()
        self.sequence_display = tk.Label(master, font=("Helvetica", 36))  
        self.sequence_display.pack()
        self.start_button = tk.Button(master, text="開始", command=self.start_test, font=("Helvetica", 24))  
        self.start_button.pack()
        self.user_entry_label = tk.Label(master, text="請輸入你記得的數字：", font=("Helvetica", 28))  
        self.user_entry_label.pack()
        self.user_entry = tk.Entry(master, font=("Helvetica", 36), state=tk.DISABLED)  
        self.user_entry.pack()
        self.submit_button = tk.Button(master, text="提交", command=self.check_sequence, state=tk.DISABLED, font=("Helvetica", 24)) 
        self.submit_button.pack()
        self.result_label = tk.Label(master, font=("Helvetica", 32))  
        self.result_label.pack()
        self.sequence_length = 3
        self.num_questions = 12  
        self.correct_count = 0
        self.total_numbers_count = 0
        self.current_question = 0
        self.results_displayed = False
        self.user_answers = []
        self.correct_answers = []

    def start_test(self):
        self.correct_count = 0
        self.total_numbers_count = 0
        self.current_question = 0
        self.results_displayed = False
        self.user_answers = []
        self.correct_answers = []
        self.next_question()

    def next_question(self):
        if self.current_question < self.num_questions:
            self.sequence = [random.randint(1, 9) for _ in range(self.sequence_length)]
            self.total_numbers_count += len(self.sequence)  
            self.display_sequence(self.sequence, 1)
            self.start_button.config(state=tk.DISABLED)
            self.user_entry.delete(0, tk.END)  
            self.user_entry.config(state=tk.DISABLED)  
            self.submit_button.config(state=tk.DISABLED)  
            self.result_label.config(text=f"本題數字長度為：{self.sequence_length}")  
            self.master.after(2000, self.enable_input)  
        else:
            if not self.results_displayed:
                self.results_displayed = True
                self.display_results()
                self.start_button.config(state=tk.NORMAL)

    def display_sequence(self, sequence, duration):
        for number in sequence:
            self.sequence_display.config(text=str(number))
            self.master.update()
            time.sleep(duration)
            self.sequence_display.config(text="")
            self.master.update()
            time.sleep(duration / 2)

    def check_sequence(self):
        user_input = self.user_entry.get()
        try:
            user_sequence = [int(num) for num in user_input]
            if len(user_sequence) != self.sequence_length:
                messagebox.showwarning("提示", "輸入數字的長度與題目不相同，請重新輸入。")
                return
        
            correct_count = sum(num1 == num2 for num1, num2 in zip(user_sequence, self.sequence))
            self.correct_count += correct_count
        
            self.current_question += 1
            self.sequence_length += 1 
            self.user_answers.append(user_sequence)
            self.correct_answers.append(self.sequence)
            self.next_question()
        except ValueError:
            self.result_label.config(text="請輸入有效的數字。")


    def enable_input(self):
        self.user_entry.config(state=tk.NORMAL) 
        self.submit_button.config(state=tk.NORMAL) 

    def display_results(self):
        result_text = "測試結果：\n"
        for i in range(self.num_questions):
            result_text += f"第 {i+1} 題：\n"
            result_text += f"    你的答案： {self.user_answers[i]}\n"
            result_text += f"    正確答案： {self.correct_answers[i]}\n"
        total_numbers_text = f"總共出現了 {self.total_numbers_count} 個數字"
        correct_count_text = f"總共正確數量：{self.correct_count}"
        accuracy_text = f"正確率：{(self.correct_count / self.total_numbers_count) * 100:.2f}%"
        result_text += f"{total_numbers_text}\n{correct_count_text}\n{accuracy_text}"
        messagebox.showinfo("測試結果", result_text)

def main():
    root = tk.Tk()
    app = MemoryTestApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
